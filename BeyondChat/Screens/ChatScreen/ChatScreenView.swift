//
//  ChatScreenView.swift
//  BeyondChat
//
//  Created by Mac on 12.08.2020.
//  Copyright (c) 2020 Lammax. All rights reserved.
//
//  This file was generated by the MVI Xcode Templates so
//  you can apply MVI architecture to your iOS and Mac projects
//


import SwiftUI

struct ChatScreenView: View {
    
    @EnvironmentObject var settings: CommonSettings
    @Environment(\.colorScheme) var colorScheme
    
    @ObservedObject var intent = ChatScreenIntent.sharedInstance
    
    @State private var viewHeight: CGFloat = UIScreen.main.bounds.height
    
    var body: some View {
        ZStack {
            TopBarView()
            ChatView(chatLines: $intent.chatLines, viewHeight: $viewHeight)
                .offset(y: -viewHeight*1.5 + UIScreen.main.bounds.height / 2.0 - 10.0)
        }
        .onAppear {
            self.intent.setup(settings: self.settings)
        }
    }
    
    private let offsetYAnim: (()->()) -> Void = { withAnimation(.linear(duration: 0.5), $0) }
    
}

struct TopBarView: View {

    @Environment(\.colorScheme) var colorScheme

    var body: some View {
        VStack(alignment: .center, spacing: .zero) {
            Text("Dialogue")
                .font(.title)
                .foregroundColor(textColor)
                .padding(.vertical, 10)
           
            DividerView(color: .gray)
            Spacer()
        }
    }
    
    
    var textColor: Color {
       colorScheme == .dark ? Color.white : Color.black
    }

}

struct ChatView: View {
    
    @Binding var chatLines: [ChatLine]
    @Binding var viewHeight: CGFloat
    
    var body: some View {
        VStack(alignment: .leading, spacing: 30) {
            GeometryReader { (g) -> Color in
                DispatchQueue.main.async {
                    self.offsetYAnim({ self.viewHeight = UIScreen.main.bounds.height - g.size.height })
                    
                    print(self.viewHeight)
                }
                return Color.clear
            }
            ForEach(0..<self.chatLines.count, id: \.self) { id in
                HStack {
                    ChatBubbleView(chatLine: self.chatLines[id], isLast: id == self.chatLines.count-1)
                    Spacer()
                }
                .padding(.horizontal, 20)
            }
        }
    }
    
    private let offsetYAnim: (()->()) -> Void = { withAnimation(.linear(duration: 1.0), $0) }

}

struct ChatScreenView_Previews: PreviewProvider {
    static var previews: some View {
        ChatScreenView()
    }
}
