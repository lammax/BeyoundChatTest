//
//  ChatScreenView.swift
//  BeyondChat
//
//  Created by Mac on 12.08.2020.
//  Copyright (c) 2020 Lammax. All rights reserved.
//
//  This file was generated by the MVI Xcode Templates so
//  you can apply MVI architecture to your iOS and Mac projects
//


import SwiftUI

struct ChatScreenView: View {
    
    @EnvironmentObject var settings: CommonSettings
    @Environment(\.colorScheme) var colorScheme
    
    @ObservedObject var intent = ChatScreenIntent.sharedInstance
    
    @State private var viewOffsetY: CGFloat = UIScreen.main.bounds.height
    
    var body: some View {
        ZStack {
            ChatView(chatLines: $intent.chatLines, viewOffsetY: $viewOffsetY)
                .offset(y: viewOffsetY)

            TopBarView()
            
            VStack {
                Spacer()
            }
            .frame(width: 5, height: UIScreen.main.bounds.height - 20, alignment: .center)
            .background(Color.yellow)
        }
        .background(Color.blue)
        .onAppear {
            self.intent.setup(settings: self.settings)
        }
    }
    
}

struct TopBarView: View {

    @Environment(\.colorScheme) var colorScheme

    var body: some View {
        VStack(alignment: .center, spacing: .zero) {
            Text("Dialogue")
                .font(.title)
                .foregroundColor(textColor)
                .padding(.vertical, 10)
           
            DividerView(color: .gray)
            Spacer()
        }
    }
    
    
    var textColor: Color {
       colorScheme == .dark ? Color.white : Color.black
    }

}

struct ChatView: View {
    
    @Binding var chatLines: [ChatLine]
    @Binding var viewOffsetY: CGFloat
    @State private var viewHeight: CGFloat = .zero
    
    var body: some View {
        ZStack {
            VStack(alignment: .leading, spacing: 30) {
                ForEach(0..<self.chatLines.count, id: \.self) { id in
                    HStack {
                        ChatBubbleView(chatLine: self.chatLines[id], isLast: id == self.chatLines.count-1)
                        Spacer()
                    }
                    .padding(.horizontal, 20)
                }
            }
            .background(ChatBackView(viewOffsetY: $viewOffsetY, viewHeight: $viewHeight))

            VStack {
                Spacer()
            }
            .frame(width: 5, height: viewHeight, alignment: .center)
            .background(Color.blue)
        }
    }
    
}

struct ChatBackView: View {
    
    @Binding var viewOffsetY: CGFloat
    @Binding var viewHeight: CGFloat

    var body: some View {
        GeometryReader { (g) -> Color in
            DispatchQueue.main.async {
                let offset = (UIScreen.main.bounds.size.height - 20.0) / 2.0 - g.size.height
                self.viewHeight = g.size.height
                self.offsetYAnim({ self.viewOffsetY = offset })
                
                print(UIScreen.main.bounds.size.height)
                print(offset)
            }
            return Color.clear
        }

    }
    
    private let offsetYAnim: (()->()) -> Void = { withAnimation(.linear(duration: 0.5), $0) }

}

/*struct MainBackView: View {
    
    //@Binding var viewHeight: CGFloat
    
    var body: some View {
        GeometryReader { (g) -> Color in
            DispatchQueue.main.async {
                //let offset = UIScreen.main.bounds.size.height / 2.0 - g.frame(in: .global).size.height
                //self.offsetYAnim({ self.viewHeight = offset })
                
                print("MainBackView height = ", g.size.height)
                print("UIScreen.main.bounds.size.height = ", UIScreen.main.bounds.size.height)

                //print(offset)
            }
            return Color.clear
        }

    }
    
    //private let offsetYAnim: (()->()) -> Void = { withAnimation(.linear(duration: 0.5), $0) }

}*/

struct ChatScreenView_Previews: PreviewProvider {
    static var previews: some View {
        ChatScreenView()
    }
}
