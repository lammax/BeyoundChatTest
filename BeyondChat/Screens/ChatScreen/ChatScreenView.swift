//
//  ChatScreenView.swift
//  BeyondChat
//
//  Created by Mac on 12.08.2020.
//  Copyright (c) 2020 Lammax. All rights reserved.
//
//  This file was generated by the MVI Xcode Templates so
//  you can apply MVI architecture to your iOS and Mac projects
//


import SwiftUI

struct ChatScreenView: View {
    
    @EnvironmentObject var settings: CommonSettings
    @Environment(\.colorScheme) var colorScheme
    
    @ObservedObject var intent = ChatScreenIntent.sharedInstance
    
    @State private var chatViewHeight: CGFloat = UIScreen.main.bounds.height
    @State private var backViewHeight: CGFloat = UIScreen.main.bounds.height

    var body: some View {
        ZStack {
            ChatView(chatLines: $intent.chatLines, chatViewHeight: $chatViewHeight)
                .offset(y: backViewHeight / 2.0 - chatViewHeight / 2.0 - 10)
                .padding(.bottom, 20)

            TopBarView()
            
        }
        .background(MainBackView(backViewHeight: $backViewHeight))
        .onAppear {
            self.intent.setup(settings: self.settings)
        }
    }
    
}

struct TopBarView: View {

    @Environment(\.colorScheme) var colorScheme

    var body: some View {
        VStack(alignment: .center, spacing: .zero) {
            Text("Dialogue")
                .font(.title)
                .foregroundColor(textColor)
                .padding(.vertical, 10)
           
            DividerView(color: dividerColor)
            Spacer()
        }
    }
    
    
    var textColor: Color {
       colorScheme == .dark ? Color.white : Color.darkGray
    }

    var dividerColor: Color {
       colorScheme == .dark ? Color.white : Color.darkGray
    }
}

struct ChatView: View {
    
    @Binding var chatLines: [ChatLine]
    @Binding var chatViewHeight: CGFloat
    
    var body: some View {
        ZStack {
            VStack(alignment: .leading, spacing: 30) {
                ForEach(0..<self.chatLines.count, id: \.self) { id in
                    HStack {
                        ChatBubbleView(chatLine: self.chatLines[id], isLast: id == self.chatLines.count-1)
                        Spacer()
                    }
                    .padding(.horizontal, 20)
                }
            }
            .background(ChatBackView(chatViewHeight: $chatViewHeight))
        }
    }
    
}

struct ChatBackView: View {
    
    @Binding var chatViewHeight: CGFloat

    var body: some View {
        GeometryReader { (g) -> Color in
            DispatchQueue.main.async {
                self.offsetYAnim({ self.chatViewHeight = g.size.height })
            }
            return Color.clear
        }

    }
    
    private let offsetYAnim: (()->()) -> Void = { withAnimation(.linear(duration: 0.5), $0) }

}

struct MainBackView: View {
    
    @Environment(\.colorScheme) var colorScheme
    
    @Binding var backViewHeight: CGFloat

    var body: some View {
        GeometryReader { (g) -> Color in
            DispatchQueue.main.async {
                self.backViewHeight = g.size.height
            }
            return self.backColor
        }

    }
    
    var backColor: Color {
        colorScheme == .dark ? Color.darkGray : Color.chatViewBack
    }
}

struct ChatScreenView_Previews: PreviewProvider {
    static var previews: some View {
        ChatScreenView()
    }
}
